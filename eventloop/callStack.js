function foo(b){
  var a = 10;
  return a + b + 11;
}

function bar(x){
  var y = 3;
  return foo(x * y);
}

console.log(bar(7)); // returns 42

// スタック
// 関数呼び出しはフレームのスタックを形成します。

// ヒープ
// オブジェクトはヒープに割り当てられています。ヒープは、メモリの大規模で大部分は構造化されていない領域を意味する名前です。

// キュー
// JavaScriptランタイムはメッセージキューを含んでいます。
// メッセージキューは、処理されるメッセージのリストです。各メッセージに関数を関連付けられています。
// スタックが空のとき、メッセージがキューから取り出され、処理されます。
// その処理は、関連する関数の呼び出し(と最初のスタックフレームの作成)で構成されています。
// スタックが再度空になると、メッセージ処理は終了します。

// イベントループ
// event loopという名前は、それが一般的にどのように実装されたかに従って付けられました。
// これは通常、次のものに似ています。

// while(queue.waitForMessage()){
//   queue.processNextMessage();
// }

